// public/api/admin/init
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    const json = (data, status = 200) =>
      new Response(JSON.stringify(data), {
        status,
        headers: { "content-type": "application/json" },
      });

    if (url.pathname !== "/api/admin/init") {
      return json({ ok: false, error: "Not found" }, 404);
    }

    // --- 1) Guard with init secret ---
    const given = url.searchParams.get("secret") || "";
    const expected = (env.ADMIN_INIT_SECRET || "").trim();
    if (!expected || given !== expected) {
      return json({ ok: false, error: "Forbidden" }, 403);
    }

    // --- 2) Helpers ---
    const sha256hex = async (text) => {
      const buf = new TextEncoder().encode(text);
      const hash = await crypto.subtle.digest("SHA-256", buf);
      return [...new Uint8Array(hash)].map(b => b.toString(16).padStart(2, "0")).join("");
    };

    // Ensure the binding name matches your Worker D1 binding.
    // If your binding is not called DB, change env.DB to env.<yourName>.
    const db = env.DB;

    // --- 3) Create tables if missing ---
    const schemaSQL = `
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        phone TEXT UNIQUE,
        full  TEXT,
        idn   TEXT,
        account TEXT UNIQUE,
        pass_hash TEXT,
        wallet INTEGER DEFAULT 0,
        invested INTEGER DEFAULT 0,
        created_at INTEGER
      );

      CREATE TABLE IF NOT EXISTS tx (
        id TEXT PRIMARY KEY,
        ts INTEGER,
        phone TEXT,
        type TEXT,
        detail TEXT,
        amount INTEGER,
        status TEXT
      );

      CREATE INDEX IF NOT EXISTS idx_tx_phone_ts ON tx(phone, ts DESC);
    `;
    await db.exec(schemaSQL);

    // --- 4) Seed / upsert the Admin user ---
    const adminPhone = (env.ADMIN_PHONE || "").trim() || "0715151010";
    const adminPass  = env.ADMIN_PASS || "Oury2933#";
    const salt       = env.PASS_SALT || "imarika-salt";
    const passHash   = await sha256hex(salt + adminPass);

    // Account label for admin
    const adminAccount = "IMK-ADMIN";

    await db.prepare(`
      INSERT INTO users (phone, full, idn, account, pass_hash, wallet, invested, created_at)
      VALUES (?1, 'System Admin', '', ?2, ?3, 0, 0, ?4)
      ON CONFLICT(phone) DO UPDATE SET pass_hash=excluded.pass_hash, account=excluded.account
    `).bind(adminPhone, adminAccount, passHash, Date.now()).run();

    // --- 5) Return status & simple sanity reads ---
    const uCount = await db.prepare(`SELECT COUNT(*) AS n FROM users`).first();
    const tCount = await db.prepare(`SELECT COUNT(*) AS n FROM tx`).first();
    const admin  = await db.prepare(`SELECT phone, account, wallet, invested FROM users WHERE phone=?1`).bind(adminPhone).first();

    return json({
      ok: true,
      message: "D1 schema ensured and admin user seeded/updated.",
      users: uCount?.n ?? 0,
      tx: tCount?.n ?? 0,
      admin,
      time: Date.now()
    });
  }
};
